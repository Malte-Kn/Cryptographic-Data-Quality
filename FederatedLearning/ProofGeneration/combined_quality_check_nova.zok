import "utils/casts/field_to_u32.zok" as field_to_u32;
import "utils/casts/u32_to_field.zok" as u32_to_field;
//export PATH=$PATH:/home/knuth/.zokrates/bin if zokrates not found
/*
Generating Proof of Quality Variance and hetrogenity in one for steps amount of Images
*/
//Set steps same as batchsize in Local_Trainers
const u32 dim = 28;
const field[10] whiteavg = [98,48,78,77,61,53,73,66,72,63];
const field[10] firstavg = [50,56,49,51,49,43,50,53,47,48];
const field[10] lastavg =  [13,14,14,13,14,11,15,13,13,14];
// imgcheck [x,y] x bad images out of y
def main(public (field [10][5],u16[2]) variance, private (u8[dim][dim],u32) imglabel)-> (field[10][5],u16[2]){
    field mut whitecount = 0;
    field mut first = 0;
    field [2] mut last = [0,0];
    field mut a = 0;
    field mut b = 0;
    field mut c = 0;
    field mut d = 0;
    field mut blackcount = 0;
    u16 mut lowquali = 0;
    u8 [dim][dim] img = imglabel.0;
    u32 label = imglabel.1;
    field[10][5] mut res = variance.0;
    u16[2] mut res2 = variance.1;
    assert(label < 10);
    for u32 i in 0..dim {
        for u32 j in 0..dim{
            whitecount = if img[i][j] >= 230 {whitecount + 1} else {whitecount};
            blackcount = if img[i][j] <= 130 {blackcount + 1} else {blackcount};
            first = if first == 0 && img[i][j] >= 230 {u32_to_field(j)} else {first};
            last = if img[i][j] >= 230 {[u32_to_field(j),u32_to_field(i)]} else {last};
            
        }
    }
    lowquali = if whitecount > 10 || blackcount < 500 {lowquali} else {lowquali + 1};  
    res2[0] = res2[0] + lowquali;
    res2[1] = res2[1] + 1;
    u16 y = res2[0]*2;
    assert(res2[1] <200 || (res2[1] >= 200 && y < res2[1]));

    res[label][3] =res[label][3] + 1;
    a = (whitecount - whiteavg[label])*(whitecount - whiteavg[label]);
    res[label][0] = res[label][0] + (a-res[label][0])/res[label][3];

    b = (first - firstavg[label])*(first - firstavg[label]);
    res[label][1] = res[label][1] + (b-res[label][1])/res[label][3];

    c = (last[0] - lastavg[label])*(last[0] - lastavg[label]);
    res[label][2] = res[label][2] + (c-res[label][2])/res[label][3];
    
    d = (last[1] -lastavg[label])*(last[1] -lastavg[label]);
    res[label][4] = res[label][4] + (d-res[label][4])/res[label][3];
    
    return (res,res2);
}
